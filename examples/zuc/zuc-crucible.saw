let {{ t (x : [32]) = drop`{1} x : [31] }};

let fresh_global n t = do {
    x <- crucible_fresh_var n t;
    let p = crucible_global n;
    crucible_points_to p (crucible_term x);
    return x;
};

let ensure_global n v = do {
    crucible_points_to (crucible_global n) (crucible_term v);
};

// Common declarations of all the globals used by the various proofs
// below.
let use_LFSR = do {
    S0 <- fresh_global "LFSR_S0" (llvm_int 32);
    S1 <- fresh_global "LFSR_S1" (llvm_int 32);
    S2 <- fresh_global "LFSR_S2" (llvm_int 32);
    S3 <- fresh_global "LFSR_S3" (llvm_int 32);
    S4 <- fresh_global "LFSR_S4" (llvm_int 32);
    S5 <- fresh_global "LFSR_S5" (llvm_int 32);
    S6 <- fresh_global "LFSR_S6" (llvm_int 32);
    S7 <- fresh_global "LFSR_S7" (llvm_int 32);
    S8 <- fresh_global "LFSR_S8" (llvm_int 32);
    S9 <- fresh_global "LFSR_S9" (llvm_int 32);
    S10 <- fresh_global "LFSR_S10" (llvm_int 32);
    S11 <- fresh_global "LFSR_S11" (llvm_int 32);
    S12 <- fresh_global "LFSR_S12" (llvm_int 32);
    S13 <- fresh_global "LFSR_S13" (llvm_int 32);
    S14 <- fresh_global "LFSR_S14" (llvm_int 32);
    S15 <- fresh_global "LFSR_S15" (llvm_int 32);
    crucible_precond {{ S0 == (S0 && 0x7FFFFFFF) }};
    crucible_precond {{ S1 == (S1 && 0x7FFFFFFF) }};
    crucible_precond {{ S2 == (S2 && 0x7FFFFFFF) }};
    crucible_precond {{ S3 == (S3 && 0x7FFFFFFF) }};
    crucible_precond {{ S4 == (S4 && 0x7FFFFFFF) }};
    crucible_precond {{ S5 == (S5 && 0x7FFFFFFF) }};
    crucible_precond {{ S6 == (S6 && 0x7FFFFFFF) }};
    crucible_precond {{ S7 == (S7 && 0x7FFFFFFF) }};
    crucible_precond {{ S8 == (S8 && 0x7FFFFFFF) }};
    crucible_precond {{ S9 == (S9 && 0x7FFFFFFF) }};
    crucible_precond {{ S10 == (S10 && 0x7FFFFFFF) }};
    crucible_precond {{ S11 == (S11 && 0x7FFFFFFF) }};
    crucible_precond {{ S12 == (S12 && 0x7FFFFFFF) }};
    crucible_precond {{ S13 == (S13 && 0x7FFFFFFF) }};
    crucible_precond {{ S14 == (S14 && 0x7FFFFFFF) }};
    crucible_precond {{ S15 == (S15 && 0x7FFFFFFF) }};
    return {{ [t S0, t S1, t S2, t S3, t S4, t S5, t S6, t S7,
               t S8, t S9, t S10, t S11, t S12, t S13, t S14, t S15] }};
};

/*
let assign_LFSR s' = do {
    llvm_ensure_eq "LFSR_S0"  {{ (0 # (s' @ 0))  : [32] }};
    llvm_ensure_eq "LFSR_S1"  {{ (0 # (s' @ 1))  : [32] }};
    llvm_ensure_eq "LFSR_S2"  {{ (0 # (s' @ 2))  : [32] }};
    llvm_ensure_eq "LFSR_S3"  {{ (0 # (s' @ 3))  : [32] }};
    llvm_ensure_eq "LFSR_S4"  {{ (0 # (s' @ 4))  : [32] }};
    llvm_ensure_eq "LFSR_S5"  {{ (0 # (s' @ 5))  : [32] }};
    llvm_ensure_eq "LFSR_S6"  {{ (0 # (s' @ 6))  : [32] }};
    llvm_ensure_eq "LFSR_S7"  {{ (0 # (s' @ 7))  : [32] }};
    llvm_ensure_eq "LFSR_S8"  {{ (0 # (s' @ 8))  : [32] }};
    llvm_ensure_eq "LFSR_S9"  {{ (0 # (s' @ 9))  : [32] }};
    llvm_ensure_eq "LFSR_S10" {{ (0 # (s' @ 10)) : [32] }};
    llvm_ensure_eq "LFSR_S11" {{ (0 # (s' @ 11)) : [32] }};
    llvm_ensure_eq "LFSR_S12" {{ (0 # (s' @ 12)) : [32] }};
    llvm_ensure_eq "LFSR_S13" {{ (0 # (s' @ 13)) : [32] }};
    llvm_ensure_eq "LFSR_S14" {{ (0 # (s' @ 14)) : [32] }};
    llvm_ensure_eq "LFSR_S15" {{ (0 # (s' @ 15)) : [32] }};
};
*/

let AddM_spec cry_add = do {
    a <- crucible_fresh_var "a" (llvm_int 31);
    b <- crucible_fresh_var "b" (llvm_int 31);

    crucible_execute_func [ (crucible_term {{ [False] # a }})
                          , (crucible_term {{ [False] # b }})
                          ];
    crucible_return (crucible_term {{ (0 # (cry_add [a, b])) : [32] }});
};

let MulPow_spec cry_mulpow = do {
    x <- crucible_fresh_var "x" (llvm_int 32);
    k <- crucible_fresh_var "k" (llvm_int 32);
    crucible_precond {{ x == (x && 0x7FFFFFFF) }};
    crucible_precond {{ k == (k && 0x7FFFFFFF) }};
    crucible_precond {{ (k >= 8) /\ (k <= 21) }};
    crucible_execute_func [crucible_term x, crucible_term k];
    crucible_return (crucible_term {{ (0 # (cry_mulpow (t x, t k))) : [32] }});
};

let BR_spec (zuc : CryptolModule) = do {
    s <- use_LFSR;
    X0 <- fresh_global "BRC_X0" (llvm_int 32);
    X1 <- fresh_global "BRC_X1" (llvm_int 32);
    X2 <- fresh_global "BRC_X2" (llvm_int 32);
    X3 <- fresh_global "BRC_X3" (llvm_int 32);
    crucible_execute_func [];
    let res = {{ zuc::BitReorganization s }};
    ensure_global "BRC_X0" {{ res @ 0 }};
    ensure_global "BRC_X1" {{ res @ 1 }};
    ensure_global "BRC_X2" {{ res @ 2 }};
    ensure_global "BRC_X3" {{ res @ 3 }};
};

/*
let F_spec (zuc : CryptolModule) = do {
    X0 <- llvm_var "BRC_X0" (llvm_int 32);
    X1 <- llvm_var "BRC_X1" (llvm_int 32);
    X2 <- llvm_var "BRC_X2" (llvm_int 32);
    R1 <- llvm_var "F_R1" (llvm_int 32);
    R2 <- llvm_var "F_R2" (llvm_int 32);
    S0a <- llvm_var "S0" (llvm_array 256 (llvm_int 8));
    S1a <- llvm_var "S1" (llvm_array 256 (llvm_int 8));
    llvm_assert {{ S0a == zuc::S0Table }};
    llvm_assert {{ S1a == zuc::S1Table }};
    let res = {{ zuc::F ([X0, X1, X2], [R1, R2]) }};
    llvm_return {{ res.0 }};
    llvm_ensure_eq "F_R1" {{ res.1 @ 0 }};
    llvm_ensure_eq "F_R2" {{ res.1 @ 1 }};
    llvm_verify_tactic abc;
};

let L12_spec cry_L12 = do {
    X <- llvm_var "X" (llvm_int 32);
    llvm_return {{ cry_L12 X }};
    llvm_verify_tactic abc;
};

let LFSRWithInitializationMode_spec cry_LIM = do {
    u <- llvm_var "u" (llvm_int 32);
    llvm_assert {{ u == (u && 0x7FFFFFFF) }};
    s <- use_LFSR;
    assign_LFSR {{ cry_LIM (t u, s) }};
    llvm_verify_tactic abc;
};
*/

m <- llvm_load_module "zuc.bc";
zuccry <- cryptol_load "zuc.cry";

print "Proving equivalence with Cryptol spec.";
AddM_ov <- crucible_llvm_verify m "AddM" [] false (AddM_spec {{ zuccry::add }}) abc;
mulpow_ov <- crucible_llvm_verify m "MulByPow2" [] false (MulPow_spec {{ zuccry::mulpow }}) abc;
BR_ov <- crucible_llvm_verify m "BitReorganization" [] false (BR_spec zuccry) abc;
/*
L1_ov <- crucible_llvm_verify "L1" [] (L12_spec {{ zuccry::L1 }});
L2_ov <- crucible_llvm_verify "L2" [] (L12_spec {{ zuccry::L2 }});
LIM_ov <- crucible_llvm_verify "LFSRWithInitialisationMode" [AddM_ov, mulpow_ov]
  (LFSRWithInitializationMode_spec {{zuccry::LFSRWithInitializationModeC}});
F_ov <- crucible_llvm_verify "F" [L1_ov, L2_ov] (F_spec zuccry);
*/
